# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_minibatch_training.ipynb.

# %% auto 0
__all__ = ['a', 'x', 'accuracy', 'report', 'Dataset', 'fit', 'get_dls']

# %% ../nbs/04_minibatch_training.ipynb 1
import pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt
from pathlib import Path
from torch import tensor,nn
import torch.nn.functional as F

# %% ../nbs/04_minibatch_training.ipynb 44
def accuracy(out, yb): return (out.argmax(dim=1) == yb).float().mean()

# %% ../nbs/04_minibatch_training.ipynb 47
def report(loss, preds, yb):
    print(f'{loss:.2f}, {accuracy(preds, yb):.2f}')

# %% ../nbs/04_minibatch_training.ipynb 54
# slice example
a = ("a", "b", "c", "d", "e", "f", "g", "h")
x = slice(0, 8, 3)
print(a[x])

# %% ../nbs/04_minibatch_training.ipynb 105
class Dataset():
    def __init__(self, x, y):
        self.x, self.y  = x,y
    
    def __len__(self):
        return len(self.x)
    
    def __getitem__(self, i): return self.x[i], self.y[i]

# %% ../nbs/04_minibatch_training.ipynb 182
from torch.utils.data import DataLoader, SequentialSampler, RandomSampler, BatchSampler

# %% ../nbs/04_minibatch_training.ipynb 198
def fit(epochs, model, loss_func, opt, train_dl, valid_dl):
    for epoch in range(epochs):
        model.train()
        for xb, yb in train_dl:
            preds = model(xb)
            loss = loss_func(preds, yb)
            loss.backward()
            opt.step()
            opt.zero_grad()
            # eval
        
        model.eval()
        with torch.no_grad():
            tot_loss,tot_acc,count = 0.,0.,0
            for xb,yb in valid_dl:
                preds = model(xb)
                loss = loss_func(preds, yb)
                n = len(xb)
                count += n
                acc = accuracy(preds, yb)
                tot_acc += acc.item()*n
                tot_loss += loss.item()*n
        
        print(epoch, tot_loss/count, tot_acc/count)
    
    return tot_loss/count, tot_acc/count

# %% ../nbs/04_minibatch_training.ipynb 199
def get_dls(train_ds, valid_ds, bs, **kwargs):
    return (
        DataLoader(train_ds, batch_size=bs, shuffle=True, **kwargs),
        DataLoader(valid_ds, batch_size=bs*2, **kwargs)
    )
