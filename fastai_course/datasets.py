# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_datasets.ipynb.

# %% ../nbs/05_datasets.ipynb 1
from __future__ import annotations
import math, numpy as np, matplotlib.pyplot as plt
from operator import itemgetter
from itertools import zip_longest
import fastcore.all as fc

from torch.utils.data import default_collate

from .training import *

# %% auto 0
__all__ = ['inplace', 'collate_dict', 'show_image', 'subplots', 'get_grid', 'show_images']

# %% ../nbs/05_datasets.ipynb 39
def inplace(f):
    def _f(b):
        f(b)
        return b
    return _f

# %% ../nbs/05_datasets.ipynb 50
def collate_dict(ds):
    get = itemgetter(*ds.features)
    def _f(b): 
        # print(type(b[0]))
        return get(default_collate(b))
    return _f

# %% ../nbs/05_datasets.ipynb 75
@fc.delegates(plt.Axes.imshow)
def show_image(im, ax=None, figsize=None, title=None, noFrames=True, **kwargs):
    "Show a PIL or PyTorch image on `ax`"

    if fc.hasattrs(im, ('cpu', 'detach', 'permute')):
        im = im.detach().cpu()
        if len(im.shape) == 3 and im.shape[0] < 5: im = im.permute(1, 2, 0)
    
    elif not isinstance(im,np.ndarray): im = np.array(im)
    if im.shape[-1] == 1: im = im[...,0]

    if ax is None:
        _,ax = plt.subplots(figsize=figsize)
    
    ax.imshow(im, **kwargs)
    if title is not None: ax.set_title(title)
    ax.set_xticks([])
    ax.set_yticks([])
    if noFrames: ax.axis('off')
    return ax

# %% ../nbs/05_datasets.ipynb 81
@fc.delegates(plt.subplots, keep=True)
def subplots(
    nrows:int=1, # Number of rowss in returned axes grid
    ncols:int=1, # Number of cols in returned axes grid
    figsize:tuple=None, # width, height in inches of returned figure
    imsize:int=3, # size of the image being displayed in inches
    suptitle: str = None, # Title to set
    **kwargs
): # fig and axes
    "A figure and set of plots to display the images"
    if figsize is None: figsize = (ncols*imsize, nrows*imsize)
    fig,ax = plt.subplots(nrows, ncols, figsize=figsize, **kwargs)
    if suptitle is not None: fig.suptitle(suptitle)
    if nrows * ncols==1: ax = np.array([ax])
    return fig, ax


# %% ../nbs/05_datasets.ipynb 86
@fc.delegates(subplots)
def get_grid(
    n:int, # Number of axes
    nrows:int=None, # Number of rows, defaulting to `int(math.sqrt(n))`
    ncols:int=None, # Number of columns, defaulting to `ceil(n/rows)`
    title:str=None, # If passed, title set to the figure
    weight:str='bold', # Title font weight
    size:int=14, # Title font size
    **kwargs,
): # fig and axs
    "Return a grid of `n` axes, `rows` by `cols`"
    if nrows: ncols = ncols or int(np.ceil(n/nrows))
    elif ncols: nrows = nrows or int(np.ceil(n/ncols))
    else:
        nrows = int(math.sqrt(n))
        ncols = int(np.floor(n/nrows))
    fig,axs = subplots(nrows, ncols, **kwargs)
    for i in range(n, nrows*ncols): axs.flat[i].set_axis_off()
    if title is not None: fig.suptitle(title, weight=weight, size=size)
    return fig,axs

# %% ../nbs/05_datasets.ipynb 94
@fc.delegates(subplots)
def show_images(ims:list, nrows:int|None=None, ncols:int|None=None, titles:list|None=None, **kwargs):
    axs = get_grid(len(ims), nrows, ncols, **kwargs)[1].flat
    for ax, t, img in zip_longest(axs, titles or [], ims):
        show_image(img, ax=ax, title=t)
